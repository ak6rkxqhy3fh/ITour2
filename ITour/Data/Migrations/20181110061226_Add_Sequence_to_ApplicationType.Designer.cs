// <auto-generated />
using System;
using ITour.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITour.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181110061226_Add_Sequence_to_ApplicationType")]
    partial class Add_Sequence_to_ApplicationType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.OrderNumber", "'OrderNumber', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITour.Models.AppFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AppFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppFile");
                });

            modelBuilder.Entity("ITour.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid?>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ITour.Models.AppType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name");

                    b.Property<int>("Sequence");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AppTypes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppType");
                });

            modelBuilder.Entity("ITour.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionCause");

                    b.Property<string>("AddressLegal");

                    b.Property<string>("AddressPostal");

                    b.Property<string>("Bank");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("INN");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("OGRN");

                    b.Property<Guid?>("PersonId");

                    b.Property<string>("Phone");

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Companies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Company");
                });

            modelBuilder.Entity("ITour.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ITour.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CustomerCompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ManagerId");

                    b.Property<Guid?>("PersonId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCompanyId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PersonId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ITour.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.Property<Guid?>("ResortId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("ITour.Models.IncomingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("BankCommission")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<Guid?>("PaymentFormId");

                    b.Property<Guid?>("PaymentTypeId");

                    b.Property<string>("ReceiptNumber");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentFormId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentsIncoming");
                });

            modelBuilder.Entity("ITour.Models.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyCompanyId");

                    b.Property<Guid?>("AgencyOfficeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LicenseDate");

                    b.Property<string>("LicenseNumber");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyCompanyId");

                    b.HasIndex("AgencyOfficeId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("ITour.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyOfficeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PersonId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyOfficeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ITour.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgencyCompanyId");

                    b.Property<Guid?>("AgencyOfficeId");

                    b.Property<string>("Comment");

                    b.Property<int?>("CountDays");

                    b.Property<int?>("CountNights");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<Guid?>("CustomerId");

                    b.Property<DateTime?>("DateBegin");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DatePrint");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ManagerId");

                    b.Property<int?>("Number")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR OrderNumber");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<string>("ReservationNumber");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TouristsCount");

                    b.Property<string>("TouristsString");

                    b.Property<Guid?>("TouroperatorBrandId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyCompanyId");

                    b.HasIndex("AgencyOfficeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("TouroperatorBrandId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ITour.Models.OrderTourist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("PersonId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PersonId");

                    b.ToTable("OrderTourists");
                });

            modelBuilder.Entity("ITour.Models.OrderTouroperatorCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("TouroperatorCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TouroperatorCompanyId");

                    b.ToTable("OrderTouroperatorCompanies");
                });

            modelBuilder.Entity("ITour.Models.OutgoingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("PartnerCompanyId");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<Guid?>("PaymentFormId");

                    b.Property<Guid?>("PaymentTypeId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerCompanyId");

                    b.HasIndex("PaymentFormId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentsOutgoing");
                });

            modelBuilder.Entity("ITour.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Comment");

                    b.Property<string>("Firstname");

                    b.Property<string>("FirstnameGenitive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmployee");

                    b.Property<string>("Middlename");

                    b.Property<string>("MiddlenameGenitive");

                    b.Property<string>("Surname");

                    b.Property<string>("SurnameGenitive");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ITour.Models.PowerAttorney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("IssuedDate");

                    b.Property<Guid>("ManagerId");

                    b.Property<string>("Number");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("PowerAttorneys");
                });

            modelBuilder.Entity("ITour.Models.RegistryTO.RegistryUri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UriString");

                    b.HasKey("Id");

                    b.ToTable("RegistryUris");
                });

            modelBuilder.Entity("ITour.Models.Resort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CountryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Resorts");
                });

            modelBuilder.Entity("ITour.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<Guid?>("CurrencyTypeId");

                    b.Property<DateTime?>("DateBegin");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("PacketTourServiceId");

                    b.Property<Guid?>("TenantId");

                    b.Property<TimeSpan?>("TimeBegin");

                    b.Property<TimeSpan?>("TimeEnd");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PacketTourServiceId");

                    b.ToTable("Services");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Service");
                });

            modelBuilder.Entity("ITour.Models.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Handler");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name");

                    b.Property<int>("Sequence");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("f6ae2fba-4238-467b-a7e5-50f72811cf8a"), Handler = "PacketTourServices", IsDeleted = false, IsSystem = true, Name = "Пакетный тур", Sequence = 1 },
                        new { Id = new Guid("ffb490de-c8f8-42f2-9c41-89f69e1d1046"), Handler = "TransportServices", IsDeleted = false, IsSystem = true, Name = "Транспорт", Sequence = 2 },
                        new { Id = new Guid("6f0ecbc6-ccff-49d0-8b84-5791d4819604"), Handler = "TransferServices", IsDeleted = false, IsSystem = true, Name = "Трансфер", Sequence = 3 },
                        new { Id = new Guid("54ccc3a1-0327-44ea-a9db-269f8bffa656"), Handler = "AccomodationServices", IsDeleted = false, IsSystem = true, Name = "Размещение", Sequence = 4 },
                        new { Id = new Guid("17a697e8-2193-44ee-a953-783dcf98e4b3"), Handler = "InsuranceServices", IsDeleted = false, IsSystem = true, Name = "Страховка", Sequence = 5 },
                        new { Id = new Guid("c23065c6-aa8d-4c04-a6c2-378b5a57ab2e"), Handler = "VisaServices", IsDeleted = false, IsSystem = true, Name = "Виза", Sequence = 6 },
                        new { Id = new Guid("accf276f-3830-4b06-9393-3064c2d31145"), Handler = "ExcursionServices", IsDeleted = false, IsSystem = true, Name = "Экскурсия", Sequence = 7 },
                        new { Id = new Guid("a3fbda79-56be-4b96-a138-fb09c69bce99"), Handler = "FuelSurchargeServices", IsDeleted = false, IsSystem = true, Name = "Типливный сбор", Sequence = 8 },
                        new { Id = new Guid("a616a1ae-f7c8-4e05-afec-be9570debb27"), Handler = "AdditionalServices", IsDeleted = false, IsSystem = true, Name = "Доп услуга", Sequence = 9 }
                    );
                });

            modelBuilder.Entity("ITour.Models.TouroperatorBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("TouroperatorBrands");
                });

            modelBuilder.Entity("ITour.Models.TouroperatorCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLegal");

                    b.Property<string>("AddressPostal");

                    b.Property<string>("Bank");

                    b.Property<string>("Comment");

                    b.Property<string>("Email");

                    b.Property<string>("FinGaranteeAmountNewPeriod");

                    b.Property<string>("FinGaranteeExpirationDateNewPeriod");

                    b.Property<string>("FinGaranteeTotalAmount");

                    b.Property<string>("FullName");

                    b.Property<string>("INN");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOpenData");

                    b.Property<bool>("IsValid");

                    b.Property<string>("JsonData");

                    b.Property<string>("Name");

                    b.Property<string>("OGRN");

                    b.Property<string>("Phone");

                    b.Property<string>("RegistryNumber");

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid?>("TouroperatorBrandId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("TouroperatorBrandId");

                    b.ToTable("TouroperatorCompanies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ITour.Models.CustomerFile", b =>
                {
                    b.HasBaseType("ITour.Models.AppFile");

                    b.Property<Guid?>("CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerFile");

                    b.HasDiscriminator().HasValue("CustomerFile");
                });

            modelBuilder.Entity("ITour.Models.PersonFile", b =>
                {
                    b.HasBaseType("ITour.Models.AppFile");

                    b.Property<Guid?>("PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonFile");

                    b.HasDiscriminator().HasValue("PersonFile");
                });

            modelBuilder.Entity("ITour.Models.CurrencyType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("CurrencyType");

                    b.HasDiscriminator().HasValue("CurrencyType");
                });

            modelBuilder.Entity("ITour.Models.DocumentType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("DocumentType");

                    b.HasDiscriminator().HasValue("DocumentType");
                });

            modelBuilder.Entity("ITour.Models.FoodType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("FoodType");

                    b.HasDiscriminator().HasValue("FoodType");
                });

            modelBuilder.Entity("ITour.Models.InsuranceType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("InsuranceType");

                    b.HasDiscriminator().HasValue("InsuranceType");
                });

            modelBuilder.Entity("ITour.Models.OrderStatus", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("OrderStatus");

                    b.HasDiscriminator().HasValue("OrderStatus");
                });

            modelBuilder.Entity("ITour.Models.PaymentForm", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("PaymentForm");

                    b.HasDiscriminator().HasValue("PaymentForm");
                });

            modelBuilder.Entity("ITour.Models.PaymentType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("PaymentType");

                    b.HasDiscriminator().HasValue("PaymentType");
                });

            modelBuilder.Entity("ITour.Models.RoomType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("RoomType");

                    b.HasDiscriminator().HasValue("RoomType");
                });

            modelBuilder.Entity("ITour.Models.TransferType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("TransferType");

                    b.HasDiscriminator().HasValue("TransferType");
                });

            modelBuilder.Entity("ITour.Models.TransportType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("TransportType");

                    b.HasDiscriminator().HasValue("TransportType");
                });

            modelBuilder.Entity("ITour.Models.VisaType", b =>
                {
                    b.HasBaseType("ITour.Models.AppType");


                    b.ToTable("VisaType");

                    b.HasDiscriminator().HasValue("VisaType");
                });

            modelBuilder.Entity("ITour.Models.AgencyCompany", b =>
                {
                    b.HasBaseType("ITour.Models.Company");


                    b.ToTable("AgencyCompany");

                    b.HasDiscriminator().HasValue("AgencyCompany");
                });

            modelBuilder.Entity("ITour.Models.AgencyOffice", b =>
                {
                    b.HasBaseType("ITour.Models.Company");


                    b.ToTable("AgencyOffice");

                    b.HasDiscriminator().HasValue("AgencyOffice");
                });

            modelBuilder.Entity("ITour.Models.CustomerCompany", b =>
                {
                    b.HasBaseType("ITour.Models.Company");


                    b.ToTable("CustomerCompany");

                    b.HasDiscriminator().HasValue("CustomerCompany");
                });

            modelBuilder.Entity("ITour.Models.InsuranceCompany", b =>
                {
                    b.HasBaseType("ITour.Models.Company");


                    b.ToTable("InsuranceCompany");

                    b.HasDiscriminator().HasValue("InsuranceCompany");
                });

            modelBuilder.Entity("ITour.Models.PartnerCompany", b =>
                {
                    b.HasBaseType("ITour.Models.Company");


                    b.ToTable("PartnerCompany");

                    b.HasDiscriminator().HasValue("PartnerCompany");
                });

            modelBuilder.Entity("ITour.Models.AccomodationService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<Guid?>("CountryId");

                    b.Property<Guid?>("FoodTypeId");

                    b.Property<string>("FoodTypeString");

                    b.Property<Guid?>("HotelId");

                    b.Property<Guid?>("ResortId");

                    b.Property<Guid?>("RoomTypeId");

                    b.Property<string>("RoomTypeString");

                    b.HasIndex("CountryId");

                    b.HasIndex("FoodTypeId");

                    b.HasIndex("HotelId");

                    b.HasIndex("ResortId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("AccomodationService");

                    b.HasDiscriminator().HasValue("AccomodationService");
                });

            modelBuilder.Entity("ITour.Models.AdditionalService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");


                    b.ToTable("AdditionalService");

                    b.HasDiscriminator().HasValue("AdditionalService");
                });

            modelBuilder.Entity("ITour.Models.ExcursionService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");


                    b.ToTable("ExcursionService");

                    b.HasDiscriminator().HasValue("ExcursionService");
                });

            modelBuilder.Entity("ITour.Models.FuelSurchargeService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<bool>("IsFuelSurcharge");

                    b.ToTable("FuelSurchargeService");

                    b.HasDiscriminator().HasValue("FuelSurchargeService");
                });

            modelBuilder.Entity("ITour.Models.InsuranceService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<Guid?>("InsuranceCompanyId");

                    b.Property<Guid?>("InsuranceTypeId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("InsuranceTypeId");

                    b.ToTable("InsuranceService");

                    b.HasDiscriminator().HasValue("InsuranceService");
                });

            modelBuilder.Entity("ITour.Models.PacketTourService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");


                    b.ToTable("PacketTourService");

                    b.HasDiscriminator().HasValue("PacketTourService");
                });

            modelBuilder.Entity("ITour.Models.TransferService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<Guid?>("TransferTypeId");

                    b.HasIndex("TransferTypeId");

                    b.ToTable("TransferService");

                    b.HasDiscriminator().HasValue("TransferService");
                });

            modelBuilder.Entity("ITour.Models.TransportService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<string>("ArrivalSity");

                    b.Property<string>("ArrivalTerminal");

                    b.Property<string>("DepartureSity");

                    b.Property<string>("DepartureTerminal");

                    b.Property<string>("Tickets");

                    b.Property<Guid?>("TransportTypeId");

                    b.Property<string>("TripNumber");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("TransportService");

                    b.HasDiscriminator().HasValue("TransportService");
                });

            modelBuilder.Entity("ITour.Models.VisaService", b =>
                {
                    b.HasBaseType("ITour.Models.Service");

                    b.Property<Guid?>("VisaTypeId");

                    b.HasIndex("VisaTypeId");

                    b.ToTable("VisaService");

                    b.HasDiscriminator().HasValue("VisaService");
                });

            modelBuilder.Entity("ITour.Models.Company", b =>
                {
                    b.HasOne("ITour.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ITour.Models.Customer", b =>
                {
                    b.HasOne("ITour.Models.CustomerCompany", "CustomerCompany")
                        .WithMany()
                        .HasForeignKey("CustomerCompanyId");

                    b.HasOne("ITour.Models.Manager", "Manager")
                        .WithMany("Customers")
                        .HasForeignKey("ManagerId");

                    b.HasOne("ITour.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ITour.Models.Hotel", b =>
                {
                    b.HasOne("ITour.Models.Resort", "Resort")
                        .WithMany("Hotels")
                        .HasForeignKey("ResortId");
                });

            modelBuilder.Entity("ITour.Models.IncomingPayment", b =>
                {
                    b.HasOne("ITour.Models.Order", "Order")
                        .WithMany("IncomingPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.PaymentForm", "PaymentForm")
                        .WithMany()
                        .HasForeignKey("PaymentFormId");

                    b.HasOne("ITour.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");
                });

            modelBuilder.Entity("ITour.Models.License", b =>
                {
                    b.HasOne("ITour.Models.AgencyCompany", "AgencyCompany")
                        .WithMany("Licenses")
                        .HasForeignKey("AgencyCompanyId");

                    b.HasOne("ITour.Models.AgencyOffice", "AgencyOffice")
                        .WithMany("Licenses")
                        .HasForeignKey("AgencyOfficeId");
                });

            modelBuilder.Entity("ITour.Models.Manager", b =>
                {
                    b.HasOne("ITour.Models.AgencyOffice", "AgencyOffice")
                        .WithMany("Managers")
                        .HasForeignKey("AgencyOfficeId");

                    b.HasOne("ITour.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ITour.Models.Order", b =>
                {
                    b.HasOne("ITour.Models.AgencyCompany", "AgencyCompany")
                        .WithMany("Orders")
                        .HasForeignKey("AgencyCompanyId");

                    b.HasOne("ITour.Models.AgencyOffice")
                        .WithMany("Orders")
                        .HasForeignKey("AgencyOfficeId");

                    b.HasOne("ITour.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ITour.Models.Manager", "Manager")
                        .WithMany("Orders")
                        .HasForeignKey("ManagerId");

                    b.HasOne("ITour.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("ITour.Models.TouroperatorBrand", "TouroperatorBrand")
                        .WithMany("Orders")
                        .HasForeignKey("TouroperatorBrandId");
                });

            modelBuilder.Entity("ITour.Models.OrderTourist", b =>
                {
                    b.HasOne("ITour.Models.Order", "Order")
                        .WithMany("Tourists")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ITour.Models.OrderTouroperatorCompany", b =>
                {
                    b.HasOne("ITour.Models.Order", "Order")
                        .WithMany("Touroperators")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.TouroperatorCompany", "TouroperatorCompany")
                        .WithMany("Orders")
                        .HasForeignKey("TouroperatorCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ITour.Models.OutgoingPayment", b =>
                {
                    b.HasOne("ITour.Models.Order", "Order")
                        .WithMany("OutgoingPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.PartnerCompany", "PartnerCompany")
                        .WithMany("OutgoingPayments")
                        .HasForeignKey("PartnerCompanyId");

                    b.HasOne("ITour.Models.PaymentForm", "PaymentForm")
                        .WithMany()
                        .HasForeignKey("PaymentFormId");

                    b.HasOne("ITour.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");
                });

            modelBuilder.Entity("ITour.Models.Person", b =>
                {
                    b.HasOne("ITour.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.OwnsOne("ITour.Models.Document", "IdDocument", b1 =>
                        {
                            b1.Property<Guid>("PersonId");

                            b1.Property<Guid?>("DocumentTypeId");

                            b1.Property<DateTime?>("ExpirationDate");

                            b1.Property<string>("IssuedBy");

                            b1.Property<DateTime?>("IssuedDate");

                            b1.Property<string>("Number");

                            b1.Property<string>("Series");

                            b1.HasIndex("DocumentTypeId");

                            b1.ToTable("People");

                            b1.HasOne("ITour.Models.DocumentType", "DocumentType")
                                .WithMany()
                                .HasForeignKey("DocumentTypeId");

                            b1.HasOne("ITour.Models.Person")
                                .WithOne("IdDocument")
                                .HasForeignKey("ITour.Models.Document", "PersonId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ITour.Models.Document", "Passport", b1 =>
                        {
                            b1.Property<Guid>("PersonId");

                            b1.Property<Guid?>("DocumentTypeId");

                            b1.Property<DateTime?>("ExpirationDate");

                            b1.Property<string>("IssuedBy");

                            b1.Property<DateTime?>("IssuedDate");

                            b1.Property<string>("Number");

                            b1.Property<string>("Series");

                            b1.HasIndex("DocumentTypeId");

                            b1.ToTable("People");

                            b1.HasOne("ITour.Models.DocumentType", "DocumentType")
                                .WithMany()
                                .HasForeignKey("DocumentTypeId");

                            b1.HasOne("ITour.Models.Person")
                                .WithOne("Passport")
                                .HasForeignKey("ITour.Models.Document", "PersonId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ITour.Models.PowerAttorney", b =>
                {
                    b.HasOne("ITour.Models.Manager", "Manager")
                        .WithMany("PowerAttorneys")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ITour.Models.Resort", b =>
                {
                    b.HasOne("ITour.Models.Country", "Country")
                        .WithMany("Resorts")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("ITour.Models.Service", b =>
                {
                    b.HasOne("ITour.Models.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId");

                    b.HasOne("ITour.Models.Order", "Order")
                        .WithMany("Services")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.PacketTourService", "PacketTourService")
                        .WithMany("Services")
                        .HasForeignKey("PacketTourServiceId");
                });

            modelBuilder.Entity("ITour.Models.TouroperatorCompany", b =>
                {
                    b.HasOne("ITour.Models.TouroperatorBrand", "TouroperatorBrand")
                        .WithMany("TouroperatorCompanies")
                        .HasForeignKey("TouroperatorBrandId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITour.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITour.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITour.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITour.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ITour.Models.CustomerFile", b =>
                {
                    b.HasOne("ITour.Models.Customer", "Customer")
                        .WithMany("CustomerFiles")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ITour.Models.PersonFile", b =>
                {
                    b.HasOne("ITour.Models.Person", "Person")
                        .WithMany("PersonFiles")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ITour.Models.AccomodationService", b =>
                {
                    b.HasOne("ITour.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ITour.Models.FoodType", "FoodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId");

                    b.HasOne("ITour.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("ITour.Models.Resort", "Resort")
                        .WithMany()
                        .HasForeignKey("ResortId");

                    b.HasOne("ITour.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId");
                });

            modelBuilder.Entity("ITour.Models.InsuranceService", b =>
                {
                    b.HasOne("ITour.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyId");

                    b.HasOne("ITour.Models.InsuranceType", "InsuranceType")
                        .WithMany()
                        .HasForeignKey("InsuranceTypeId");
                });

            modelBuilder.Entity("ITour.Models.TransferService", b =>
                {
                    b.HasOne("ITour.Models.TransferType", "TransferType")
                        .WithMany()
                        .HasForeignKey("TransferTypeId");
                });

            modelBuilder.Entity("ITour.Models.TransportService", b =>
                {
                    b.HasOne("ITour.Models.TransportType", "TransportType")
                        .WithMany()
                        .HasForeignKey("TransportTypeId");
                });

            modelBuilder.Entity("ITour.Models.VisaService", b =>
                {
                    b.HasOne("ITour.Models.VisaType", "VisaType")
                        .WithMany()
                        .HasForeignKey("VisaTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
